You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: num = "52"
Output: "5"
Explanation: The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.
Example 2:

Input: num = "4206"
Output: ""
Explanation: There are no odd numbers in "4206".
Example 3:

Input: num = "35427"
Output: "35427"
Explanation: "35427" is already an odd number.


class Solution {
    public String largestOddNumber(String num) {

        int pos=-1;
        int i=0;
        while(i<num.length())
        {
            int ch= num.charAt(i)-'0';
            if(ch%2!=0)
            {
                
                   pos=i;
                
            }
            i++;
        }

        if(pos==-1)
        {
            return "";
        }
        else
        {
            return num.substring(0,pos+1);
        }

    }
}

T=O(n)
S=O(1)
